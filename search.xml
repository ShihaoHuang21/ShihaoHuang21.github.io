<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node学习笔记</title>
      <link href="/2021/10/24/node-xue-xi-bi-ji/"/>
      <url>/2021/10/24/node-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="path-url模块使用"><a href="#path-url模块使用" class="headerlink" title="path,url模块使用"></a>path,url模块使用</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//设置请求头信息</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/html;charset='utf-8'"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">!=</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//获取请求参数</span>    <span class="token keyword">var</span> userInfo <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hello node.js"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server running at http://127.0.0.1:8081/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="supervisor工具使用"><a href="#supervisor工具使用" class="headerlink" title="supervisor工具使用"></a>supervisor工具使用</h1><p>supervisor会不停的watch应用下的所有文件，发现文件被修改，就会重新载入程序文件这样实现了部署，修改了程序文件后就能马上看到变更后的效果。</p><h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><p><code>cnpm install -g supervisor</code></p><h3 id="使用supervisor代替node命令"><a href="#使用supervisor代替node命令" class="headerlink" title="使用supervisor代替node命令"></a>使用supervisor代替node命令</h3><p><img src="C:/Users/Arosy/AppData/Roaming/Typora/typora-user-images/image-20211024164703667.png" alt="image-20211024164703667"></p><h1 id="Nodejs模块、自定义模块"><a href="#Nodejs模块、自定义模块" class="headerlink" title="Nodejs模块、自定义模块"></a>Nodejs模块、自定义模块</h1><h3 id="什么是Commonjs"><a href="#什么是Commonjs" class="headerlink" title="什么是Commonjs?"></a>什么是Commonjs?</h3><p>Commonjs规范的提出，主要是为了弥补当前JavaScript没有标准库的缺陷。它的终极目标就是：提供一个类似Python.Ruby和java语言的标准库。</p><p><strong>Commonjs就是模块化的标准，Nodejs就是Commonjs（模块化）的实现</strong></p><h1 id="Nodejs中fs模块"><a href="#Nodejs中fs模块" class="headerlink" title="Nodejs中fs模块"></a>Nodejs中fs模块</h1><table><thead><tr><th>模块</th><th>作用</th></tr></thead><tbody><tr><td>fs.stat</td><td>检测是文件还是目录</td></tr><tr><td>fs.mkdir</td><td>创建目录</td></tr><tr><td>fs.writeFile</td><td>创建写入文件</td></tr><tr><td>fs.appendFile</td><td>追加文件</td></tr><tr><td>fs.readFile</td><td>读取文件</td></tr><tr><td>fs.readdir</td><td>读取目录</td></tr><tr><td>fs.rename</td><td>重命名</td></tr><tr><td>fs.rmdir</td><td>删除目录</td></tr><tr><td>fs.unlink</td><td>删除文件</td></tr></tbody></table><p><strong>fs.stat</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">'./html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">目录</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">文件</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ShihaoHuang310/images/raw/master/202110241742264.png" alt="image-20211024174230174"></p><p><strong>fs.mkdir</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">/*path 将创建的目录路径mode 目录权限（读取权限）,默认777callback  回调，传递异常参数err*/</span>fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'./css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'创建成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ShihaoHuang310/images/raw/master/202110241746113.png" alt="image-20211024174612070"></p><p><strong>fs.writeFile</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">/*filename (string) 文件名称data (string|Buffer) 将要写入的内容，可以使用字符串或者buffer数据options （object） option数组对象，包含：    ·encoding (string) 可选值，默认 ’utf-‘ ,当data使用buffer时，该值为    `mode (Number) 文件读写权限，默认值 438    `flag (string) 默认值 'w'    · callback {function} 回调，传递一个异常参数err*/</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./html/index.html'</span><span class="token punctuation">,</span> <span class="token string">'node.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'创建写入文件成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fs.appendFile</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'./css/base.css'</span><span class="token punctuation">,</span> <span class="token string">'body{color:red}\n'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'./css/base.css'</span><span class="token punctuation">,</span> <span class="token string">'h2{color:blue}\n'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fs.readFile</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./html/index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fs.readdir</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">'./html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ShihaoHuang310/images/raw/master/202110241806837.png" alt="image-20211024180629780"></p><p><strong>fs.rename</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">/*1.重命名2.移动文件*/</span>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">'./css/base.css'</span><span class="token punctuation">,</span> <span class="token string">'./css/index.css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'重命名成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将css-&gt;index.css移动到html-&gt;index.css</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">'./css/index.css'</span><span class="token punctuation">,</span> <span class="token string">'./html/index.css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'移动文件成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fs.unlink</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'./css/index.css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除文件成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先要将目录里的文件删除才可以删除目录</p><p><strong>fs.rmdir</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">'./css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除目录成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fs模块练习"><a href="#fs模块练习" class="headerlink" title="fs模块练习"></a>fs模块练习</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.判断服务器上面有没有upload目录。如果没有创建这个目录，如果有不做操作(上传图片)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">'./upload'</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//执行创建目录</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'upload目录存在'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//先删除在执行创建目录</span>    fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请检查传入的数据是否正确'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//创建目录函数</span><span class="token keyword">function</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mkdirp包使用</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**https://www.npmjs.com/package/mkdirp * * cnpm install mkdirp * * const mkdirp = require('mkdirp')*/</span><span class="token keyword">const</span> mkdirp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mkdirp'</span><span class="token punctuation">)</span><span class="token function">mkdirp</span><span class="token punctuation">(</span><span class="token string">'./upload'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//直接创建</span><span class="token function">mkdirp</span><span class="token punctuation">(</span><span class="token string">'./uploadDir'</span><span class="token punctuation">)</span><span class="token comment">//创建多个目录</span><span class="token function">mkdirp</span><span class="token punctuation">(</span><span class="token string">'./upload/aaa/xxxx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/ShihaoHuang310/images/raw/master/202110241843650.png" alt="image-20211024184342591"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//2.wwwroot文件下面有images css js 以及 index.html ，找出wwwroot目录下所有文件</span><span class="token comment">// ，然后把目录放在一个数组</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">'./wwwroot'</span><span class="token keyword">var</span> dirArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">getDir</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dirArr<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dirArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">getDir</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用async和await"><a href="#使用async和await" class="headerlink" title="使用async和await"></a>使用async和await</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.定义一个isDir的方法判断一个资源到底是文件还是目录</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">isDir</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//2.获取wwwroot里面的所有资源 循环遍历</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">'./wwwroot'</span>  <span class="token keyword">var</span> dirArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">isDir</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dirArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dirArr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fs的流以及管道流"><a href="#fs的流以及管道流" class="headerlink" title="fs的流以及管道流"></a>fs的流以及管道流</h3><p><strong>读取流</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">let</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'./text.txt'</span><span class="token punctuation">)</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span>readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  str <span class="token operator">+=</span> data  count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span>readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>写入流</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data <span class="token operator">+=</span> <span class="token string">"我是数据000000000000000000000000000000000\n"</span><span class="token punctuation">}</span><span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'./text.txt'</span><span class="token punctuation">)</span>writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//标记写入完成</span>writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入完成'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>管道流</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">//管道流</span><span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'./aaa.jpg'</span><span class="token punctuation">)</span><span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'./data/aaa.jpg'</span><span class="token punctuation">)</span>readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 学习笔记</title>
      <link href="/2021/10/16/vue3-xue-xi-bi-ji/"/>
      <url>/2021/10/16/vue3-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="vue学习笔记"><a href="#vue学习笔记" class="headerlink" title="vue学习笔记"></a>vue学习笔记</h1><h1 id="一vue环境搭建-目录结构"><a href="#一vue环境搭建-目录结构" class="headerlink" title="一vue环境搭建/目录结构"></a>一vue环境搭建/目录结构</h1><h3 id="Vue-cli的安装"><a href="#Vue-cli的安装" class="headerlink" title="Vue-cli的安装"></a>Vue-cli的安装</h3><blockquote><p>yarn  add global add @vue/cli</p></blockquote><blockquote><p>npm install -g @vue/cli</p></blockquote><blockquote><p>cnpm install -g @vue/cli</p></blockquote><h3 id="安装cnmp命令"><a href="#安装cnmp命令" class="headerlink" title="安装cnmp命令:"></a>安装cnmp命令:</h3><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote><h3 id="安装yarn命令"><a href="#安装yarn命令" class="headerlink" title="安装yarn命令"></a>安装yarn命令</h3><blockquote><p>npm install  -g yarn</p></blockquote><h3 id="一-通过Vue-cli创建项目"><a href="#一-通过Vue-cli创建项目" class="headerlink" title="一.通过Vue-cli创建项目"></a>一.通过Vue-cli创建项目</h3><blockquote><p>vue create hello-vue3</p><p>yarn serve</p></blockquote><h3 id="二-通过Vite创建项目"><a href="#二-通过Vite创建项目" class="headerlink" title="二.通过Vite创建项目"></a>二.通过Vite创建项目</h3><h4 id="2-1使用npm创建"><a href="#2-1使用npm创建" class="headerlink" title="2.1使用npm创建"></a>2.1使用npm创建</h4><blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">npm init vite-app &lt;project-name&gt;cd &lt;project-name&gt;npm installnpm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2使用yarn创建"><a href="#2-2使用yarn创建" class="headerlink" title="2.2使用yarn创建"></a>2.2使用yarn创建</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">yarn create vite-app &lt;project-name&gt;cd &lt;project-name&gt;yarnyarn dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-目录结构"><a href="#三-目录结构" class="headerlink" title="三.目录结构"></a>三.目录结构</h3><p><img src="https://gitee.com/ShihaoHuang310/images/raw/master/202110121820487.png" alt="image-20211012182006357"></p><h1 id="二Vue3-x绑定数据、绑定html、绑定属性、循环数据"><a href="#二Vue3-x绑定数据、绑定html、绑定属性、循环数据" class="headerlink" title="二Vue3.x绑定数据、绑定html、绑定属性、循环数据"></a><strong>二Vue3.x绑定数据、绑定html、绑定属性、循环数据</strong></h1><h3 id="1-1-Vue3-x数据绑定"><a href="#1-1-Vue3-x数据绑定" class="headerlink" title="1.1 Vue3.x数据绑定"></a>1.1 Vue3.x数据绑定</h3><p>业务逻辑</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">export default {  name: "",  data() {    return {      msg: "你好vue",      userInfo: {        name: "make",        age: 18,      },    };  },  mounted() {},  methods: {},};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;msg:{{ msg }}&lt;/h2&gt;  &lt;h2&gt;name:{{ userInfo.name }}&lt;/h2&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-Vue3-x-v-html绑定html"><a href="#1-2-Vue3-x-v-html绑定html" class="headerlink" title="1.2  Vue3.x v-html绑定html"></a>1.2  Vue3.x v-html绑定html</h3><p>业务逻辑</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">export default {  name: "",  data() {    return {      msg: "你好vue",    };  },  mounted() {},  methods: {},};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2 v-html="msg"&gt;&lt;/h2&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3、Vue3-x-v-bind绑定属性"><a href="#1-3、Vue3-x-v-bind绑定属性" class="headerlink" title="1.3、Vue3.x v-bind绑定属性"></a>1.3、Vue3.x v-bind绑定属性</h3><p>业务逻辑：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">export default {  name: "",  data() {    return {      logSrc:  "https://gitee.com/ShihaoHuang310/images/raw/master/202109161035849.png",    };  },  mounted() {},  methods: {},};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- 1、绑定属性的第一种写法v-bind: --&gt;  &lt;img v-bind:src="logSrc" alt="logo" /&gt;  &lt;!-- 2、绑定属性的第二种写法: --&gt;  &lt;img :src="logSrc" alt="logo" /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4、v-bind动态参数"><a href="#1-4、v-bind动态参数" class="headerlink" title="1.4、v-bind动态参数"></a>1.4、v-bind动态参数</h3><blockquote><p>&lt;a v-bind:[attributeName]=”url”&gt; … </p></blockquote><p>这里<code>attributeName</code>将被动态地评估为JavaScript表达式，并且其评估值将用作参数的最终值。例如，如果您的组件实例具有一个数据属性<code>attributeName</code>，其值为<code>"href"</code>，则此绑定将等效于<code>v-bind:href</code></p><p>业务逻辑</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">export default {  name: "",  data() {    return {      attributeName: "href",      linkUrl: "http://www.baidu.com",    };  },  mounted() {},  methods: {},};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- 1、绑定属性的第一种写法v-bind: --&gt;  &lt;a v-bind:[attributeName]="linkUrl"&gt;百度&lt;/a&gt;  &lt;!-- 2、绑定属性的第二种写法: --&gt;  &lt;a :[attributeName]="linkUrl"&gt;百度&lt;/a&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5、v-for循环数组"><a href="#1-5、v-for循环数组" class="headerlink" title="1.5、v-for循环数组"></a>1.5、v-for循环数组</h3><p>逻辑代码</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  name: "",  data() {    return {      list1: ["c++", "c#", "java", "python"],      list2: [        { id: 1, name: "make1", age: 18 },        { id: 2, name: "make2", age: 19 },        { id: 3, name: "make3", age: 20 },      ],      list3: [        {          cate: "国内新闻",          list: [{ title: "国内新闻1" }, { title: "国内新闻2" }],        },        {          cate: "国外新闻",          list: [{ title: "国外新闻1" }, { title: "国外新闻2" }],        },      ],    };  },  mounted() {},  methods: {},};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;list1&lt;/h2&gt;  &lt;ul&gt;    &lt;li v-for="(item, index) in list1" :key="index"&gt;{{ item }}&lt;/li&gt;  &lt;/ul&gt;  &lt;hr /&gt;  &lt;h2&gt;list2&lt;/h2&gt;  &lt;ul v-for="(item, index) in list2" :key="index"&gt;    &lt;li&gt;{{ item.id }}&lt;/li&gt;    &lt;li&gt;{{ item.name }}&lt;/li&gt;    &lt;li&gt;{{ item.age }}&lt;/li&gt;  &lt;/ul&gt;  &lt;hr /&gt;  &lt;h2&gt;list3&lt;/h2&gt;  &lt;ul v-for="(item, index) in list3" :key="index"&gt;    &lt;li&gt;      &lt;h2&gt;{{ item.cate }}&lt;/h2&gt;      &lt;p v-for="(list, index) in item.list" :key="index"&gt;{{ list.title }}&lt;/p&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6、v-for循环对象"><a href="#1-6、v-for循环对象" class="headerlink" title="1.6、v-for循环对象"></a>1.6、v-for循环对象</h3><p>业务逻辑:</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      listObject: {        title: "how to do lists in vue!",        author: "make",        publishedAt: "2021-05-06",      },    };  },  mounted() {},  methods: {},};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template模板：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;ul v-for="(k, v, i) in listObject" :key="i"&gt;    &lt;li&gt;{{ k }}----{{ v }}---{{ i }}&lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三Vue3-x中的事件方法入门、模板语法模板中类和样式绑定"><a href="#三Vue3-x中的事件方法入门、模板语法模板中类和样式绑定" class="headerlink" title="三Vue3.x中的事件方法入门、模板语法模板中类和样式绑定"></a>三<strong>Vue3.x中的事件方法入门、模板语法模板中类和样式绑定</strong></h1><h3 id="一、Vue3-x中的事件方法入门"><a href="#一、Vue3-x中的事件方法入门" class="headerlink" title="一、Vue3.x中的事件方法入门"></a>一、Vue3.x中的事件方法入门</h3><p><strong>业务逻辑</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      num: 1,      msg: "hello vue",    };  },  mounted() {},  methods: {    setMsg() {      this.msg = "change msg";    },    getMsg() {      alert(this.msg);    },  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>template模板</strong>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;Num:{{ num }}&lt;/h2&gt;  &lt;button @click="num += 1"&gt;+&lt;/button&gt;  &lt;h2&gt;msg:{{ msg }}&lt;/h2&gt;  &lt;button @click="setMsg"&gt;设置msg&lt;/button&gt;  &lt;button @click="getMsg"&gt;获取msg&lt;/button&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、Vue3-v-bind绑定Class"><a href="#二、Vue3-v-bind绑定Class" class="headerlink" title="二、Vue3 v-bind绑定Class"></a>二、Vue3 v-bind绑定Class</h3><p>当<code>v-bind</code>与<code>class</code>和一起使用时，Vue提供了特殊的增强功能<code>style</code>。除了字符串外，表达式还可以求值为对象或数组。</p><h4 id="1-1、v-bind-class绑定字符串"><a href="#1-1、v-bind-class绑定字符串" class="headerlink" title="1.1、v-bind:class绑定字符串"></a><strong>1.1、v-bind:class绑定字符串</strong></h4><p><strong>业务逻辑</strong>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class="isActive"&gt;hello&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      isActive: "active",    };  },  mounted() {},  methods: {    setMsg() {      this.msg = "change msg";    },    getMsg() {      alert(this.msg);    },  },};&lt;/script&gt;&lt;style scoped&gt;.active {  width: 100px;  height: 100px;  background: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2、v-bind-class绑定对象"><a href="#1-2、v-bind-class绑定对象" class="headerlink" title="1.2、v-bind:class绑定对象"></a><strong>1.2、v-bind:class绑定对象</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class="{ active: 'isActive', error: 'hasError' }"&gt;v-bind:class演示&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      isActive: true,      hasError: false,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;.active {  width: 100px;  height: 100px;  background: red;}.error {  color: blue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3、v-bind-class-结合-class的使用"><a href="#1-3、v-bind-class-结合-class的使用" class="headerlink" title="1.3、v-bind:class 结合 class的使用"></a><strong>1.3、v-bind:class 结合 class的使用</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="static" :class="{ active: 'isActive', error: 'hasError' }"&gt;    v-bind:class演示  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      isActive: true,      hasError: false,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;.static {  font-size: 20px;}.active {  width: 100px;  height: 100px;  background: red;}.error {  color: blue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4、数组语法"><a href="#1-4、数组语法" class="headerlink" title="1.4、数组语法"></a><strong>1.4、数组语法</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class="[activeClass, errorClass]"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      activeClass: "active",      errorClass: "text-danger",    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5、数组语法-结合三目运算"><a href="#1-5、数组语法-结合三目运算" class="headerlink" title="1.5、数组语法 结合三目运算"></a><strong>1.5、数组语法 结合三目运算</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class="[isActive ? activeClass : errorClass]"&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      isActive: true,      activeClass: "active",      errorClass: "text-danger",    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;.active {  width: 100px;  height: 100px;  background: red;}.error {  color: blue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、v-bind-style-绑定内联样式"><a href="#三、v-bind-style-绑定内联样式" class="headerlink" title="三、v-bind:style 绑定内联样式"></a>三、v-bind:style 绑定内联样式</h3><h4 id="2-1、第一种绑定方式"><a href="#2-1、第一种绑定方式" class="headerlink" title="2.1、第一种绑定方式"></a><strong>2.1、第一种绑定方式</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :style="{ color: activeColor, fontSize: fontSize + 'px' }"&gt;hello&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      activeColor: "red",      fontSize: 30,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2、第二种绑定方式"><a href="#2-2、第二种绑定方式" class="headerlink" title="2.2、第二种绑定方式"></a><strong>2.2、第二种绑定方式</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :style="styleObject"&gt;hello&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      styleObject: {        color: "red",        fontSize: "13px",      },    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3、第三种绑定方式-数组方式"><a href="#2-3、第三种绑定方式-数组方式" class="headerlink" title="2.3、第三种绑定方式 数组方式"></a><strong>2.3、第三种绑定方式 数组方式</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :style="[baseStyles, overridingStyles]"&gt;hello&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      baseStyles: {        color: "orange",        fontSize: "17px",      },      overridingStyles: {        width: "100px",        height: "100px",        background: "blue",      },    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4、自动前缀"><a href="#2-4、自动前缀" class="headerlink" title="2.4、自动前缀"></a>2.4、自动前缀</h4><blockquote><p>当您使用需要一个CSS属性<a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">供应商前缀</a>的<code>:style</code>，例如<code>transform</code>，Vue公司会自动检测并添加适当的前缀到应用的样式。</p></blockquote><h4 id="2-5、多个值"><a href="#2-5、多个值" class="headerlink" title="2.5、多个值"></a>2.5、多个值</h4><blockquote><p>您可以为样式属性提供多个（前缀）值的数组，例如：</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ display: [<span class="token punctuation">'</span>-webkit-box<span class="token punctuation">'</span>, <span class="token punctuation">'</span>-ms-flexbox<span class="token punctuation">'</span>, <span class="token punctuation">'</span>flex<span class="token punctuation">'</span>] }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这只会呈现浏览器支持的数组中的最后一个值。在此示例中，它将<code>display: flex</code>为支持非前缀版本的flexbox的浏览器呈现。</p><h3 id="四、案例：循环数据-第一个数据高亮显示"><a href="#四、案例：循环数据-第一个数据高亮显示" class="headerlink" title="四、案例：循环数据 第一个数据高亮显示"></a>四、案例：循环数据 第一个数据高亮显示</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;ul v-for="(item, index) in list" :key="index"&gt;    &lt;li :class="{ red: index == 0, blue: index == 1 }"&gt;{{ item }}&lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      list: ["马化腾", "马云", "刘强东"],    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;.red {  color: red;}.blue {  color: blue;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四Vue3-x中的事件方法详解、事件监听、方法传值、事件对象、多事件处理程序、事件修饰符、按键修饰符"><a href="#四Vue3-x中的事件方法详解、事件监听、方法传值、事件对象、多事件处理程序、事件修饰符、按键修饰符" class="headerlink" title="四Vue3.x中的事件方法详解、事件监听、方法传值、事件对象、多事件处理程序、事件修饰符、按键修饰符"></a>四<strong>Vue3.x中的事件方法详解、事件监听、方法传值、事件对象、多事件处理程序、事件修饰符、按键修饰符</strong></h1><h3 id="一、Vue3-x监听事件"><a href="#一、Vue3-x监听事件" class="headerlink" title="一、Vue3.x监听事件"></a>一、Vue3.x监听事件</h3><blockquote><p>vue中监听事件可以使用<code>v-on:click</code>或者 <code>@click</code> ,<code>@click</code> 为<code>v-on:click</code>的简写，例如</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;{{ counter }}&lt;/h2&gt;  &lt;button @click="counter += 1"&gt;+1&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      counter: 1,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、Vue3-x定义方法-执行方法-获取数据-改变数据"><a href="#二、Vue3-x定义方法-执行方法-获取数据-改变数据" class="headerlink" title="二、Vue3.x定义方法 执行方法 获取数据 改变数据"></a>二、Vue3.x定义方法 执行方法 获取数据 改变数据</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;{{ msg }}&lt;/h2&gt;  &lt;button @click="setMsg()"&gt;设置msg&lt;/button&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;button @click="getMsg()"&gt;获取msg&lt;/button&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;h2&gt;Num:{{ num }}&lt;/h2&gt;  &lt;button @click="num += 1"&gt;Add 1&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      num: 1,      msg: "你好vue",    };  },  mounted() {},  methods: {    setMsg() {      this.msg = "我是方法里改变后的msg";    },    getMsg() {      alert(this.msg);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Vue3-x方法传值、方法的相互调用"><a href="#三、Vue3-x方法传值、方法的相互调用" class="headerlink" title="三、Vue3.x方法传值、方法的相互调用"></a>三、Vue3.x方法传值、方法的相互调用</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;{{ msg }}&lt;/h2&gt;  &lt;button @click="setMsg('只执行方法传值改变msg')"&gt;设置msg&lt;/button&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;button @click="run()"&gt;获取msg&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      num: 1,      msg: "你好vue",    };  },  mounted() {},  methods: {    setMsg(msg) {      this.msg = msg;    },    run() {      this.getMsg();    },    getMsg() {      alert(this.msg);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、事件对象"><a href="#四、事件对象" class="headerlink" title="四、事件对象"></a>四、事件对象</h3><h4 id="一、单个参数"><a href="#一、单个参数" class="headerlink" title="一、单个参数"></a>一、单个参数</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button data-aid="123" @click="eventFn($event)"&gt;事件对象&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      msg: "hello vue",    };  },  mounted() {},  methods: {    eventFn(e) {      console.log(e);      e.srcElement.style.background = "red";      console.log(e.srcElement.dataset.aid);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、多个参数"><a href="#二、多个参数" class="headerlink" title="二、多个参数"></a>二、多个参数</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button data-aid="123" @click="eventFn('HELLO VUE', $event)"&gt;事件对象&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      msg: "hello vue",    };  },  mounted() {},  methods: {    eventFn(msg, e) {      if (e) {        e.preventDefault();      }      alert(msg);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、Vue3-x-多事件处理程序"><a href="#五、Vue3-x-多事件处理程序" class="headerlink" title="五、Vue3.x 多事件处理程序"></a>五、Vue3.x 多事件处理程序</h3><p>您可以在事件处理程序中使用逗号分隔多个事件处理程序，如下所示：</p><p><strong>业务逻辑：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// first handler logic...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">two</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// second handler logic...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>template模板</strong>：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button @click="one($event), two($event)"&gt;  Submit&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="六、事件修饰符"><a href="#六、事件修饰符" class="headerlink" title="六、事件修饰符"></a>六、事件修饰符</h3><p>vue中阻止冒泡 阻止默认行为，可以通过事件对象<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>实现，还可以通过事件修饰符实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">.</span>stop<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>self<span class="token punctuation">.</span>once<span class="token punctuation">.</span>passiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>stopPropagation:</strong></p><blockquote><p><code>&lt;a @click.stop="doThis"&gt;&lt;/a&gt;</code></p></blockquote><p><strong>preventDefault:</strong></p><blockquote><p><code>&lt;a @click.prevent="doThat"&gt;&lt;/a&gt;</code></p></blockquote><p><strong>stopPropagation And preventDefault</strong></p><blockquote><p><code>&lt;a @click.stop.prevent="doThat"&gt;&lt;/a&gt;</code></p></blockquote><h3 id="七、按键修饰符"><a href="#七、按键修饰符" class="headerlink" title="七、按键修饰符"></a>七、按键修饰符</h3><p>监听键盘事件时，我们通常需要检查特定的键。Vue允许在监听关键事件时<code>v-on</code>或<code>@</code>在监听关键事件时添加按键修饰符：</p><blockquote><p><code>&lt;input @keyup.enter="submit" /&gt;</code></p></blockquote><p>Vue为最常用的键提供别名：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">.enter.tab.delete （同时捕获“删除”和“退格”键）.esc.space.up.down.left.right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五Vue3-x中Dom操作-refs-以及表单（-input、checkbox、radio、select、-textarea-）结合双休数据绑定实现在线预约功能"><a href="#五Vue3-x中Dom操作-refs-以及表单（-input、checkbox、radio、select、-textarea-）结合双休数据绑定实现在线预约功能" class="headerlink" title="五Vue3.x中Dom操作$refs 以及表单（ input、checkbox、radio、select、 textarea ）结合双休数据绑定实现在线预约功能"></a>五<strong>Vue3.x中Dom操作$refs 以及表单（ input、checkbox、radio、select、 textarea ）结合双休数据绑定实现在线预约功能</strong></h1><h3 id="一、Vue3-x中的双休数据绑定实现人员登记系统"><a href="#一、Vue3-x中的双休数据绑定实现人员登记系统" class="headerlink" title="一、Vue3.x中的双休数据绑定实现人员登记系统"></a>一、Vue3.x中的双休数据绑定实现人员登记系统</h3><p><img src="http://bbs.itying.com/public/upload/42a0ce40-2d3a-11eb-8ac2-41a88e51bce8.png" alt="点击内容或者外部自动关闭图片预览"></p><h3 id="二、Vue3-x-Dom操作"><a href="#二、Vue3-x-Dom操作" class="headerlink" title="二、Vue3.x Dom操作"></a>二、Vue3.x Dom操作</h3><p><strong>1、第一种方法 原生js</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="people_list"&gt;    &lt;ul&gt;      &lt;li&gt;姓名：&lt;input type="text" id="username" /&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;button @click="doSubmit()" class="submit"&gt;获取表单内容&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      msg: "hello vue",    };  },  mounted() {},  methods: {    doSubmit() {      var username = document.querySelector("#username");      alert(username.value);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、第二种方法 ref获取dom节点</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="people_list"&gt;    &lt;ul&gt;      &lt;li&gt;姓名：&lt;input type="text" id="username" /&gt;&lt;/li&gt;      &lt;li&gt;年龄:&lt;input type="text" ref="age" /&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;button @click="doSubmit()" class="submit"&gt;获取表单内容&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      msg: "hello vue",    };  },  mounted() {},  methods: {    doSubmit() {      var username = document.querySelector("#username");      alert(username.value);      var age = this.$refs.age;      alert(age.value);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Vue3-x双休数据绑定"><a href="#三、Vue3-x双休数据绑定" class="headerlink" title="三、Vue3.x双休数据绑定"></a>三、Vue3.x双休数据绑定</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="people_list"&gt;    &lt;ul&gt;      &lt;li&gt;姓名：&lt;input type="text" v-model="peopleInfo.username" /&gt;&lt;/li&gt;      &lt;li&gt;年龄:&lt;input type="text" v-model="peopleInfo.age" /&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;button @click="doSubmit()" class="submit"&gt;获取表单内容&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      peopleInfo: {        username: "",        age: "",      },    };  },  mounted() {},  methods: {    doSubmit() {      alert(this.peopleInfo.username);      alert(this.peopleInfo.age);    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、-input、checkbox、radio、select、-textarea中的双休数据绑定"><a href="#四、-input、checkbox、radio、select、-textarea中的双休数据绑定" class="headerlink" title="四、 input、checkbox、radio、select、 textarea中的双休数据绑定"></a>四、 input、checkbox、radio、select、 textarea中的双休数据绑定</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;人员登录系统&lt;/h2&gt;  &lt;div class="people_list"&gt;    &lt;ul&gt;      &lt;li&gt;姓名:&lt;input type="text" v-model="peopleInfo.username" /&gt;&lt;/li&gt;      &lt;li&gt;年龄:&lt;input type="text" v-model="peopleInfo.age" /&gt;&lt;/li&gt;      &lt;li&gt;性别：&lt;/li&gt;      &lt;input type="radio" value="1" id="sex1" v-model="peopleInfo.sex" /&gt;      &lt;label for="sex1"&gt;男&lt;/label&gt;      &lt;input type="radio" value="2" id="sex2" v-model="peopleInfo.sex" /&gt;      &lt;label for="sex2"&gt;女&lt;/label&gt;      &lt;li&gt;        城市：        &lt;select name="city" id="city" v-model="peopleInfo.city"&gt;          &lt;option            v-for="(item, index) in peopleInfo.cityList"            :key="index"            :value="item"          &gt;            {{ item }}          &lt;/option&gt;        &lt;/select&gt;      &lt;/li&gt;      &lt;li&gt;        爱好：        &lt;span v-for="(item, index) in peopleInfo.hobby" :key="index"&gt;          &lt;input type="checkbox" :id="'check' + index" v-model="item.checked" /&gt;          &lt;label :for="'check' + key"&gt;{{ item.title }}&lt;/label&gt;        &lt;/span&gt;      &lt;/li&gt;      &lt;li&gt;        备注：        &lt;textarea          name="mark"          id="mark"          cols="30"          rows="5"          v-model="peopleInfo.mark"        &gt;&lt;/textarea&gt;      &lt;/li&gt;    &lt;/ul&gt;    &lt;button @click="doSubmit()" class="submit"&gt;获取表单内容&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      peopleInfo: {        username: "",        age: "",        sex: "2",        cityList: ["北京", "上海", "深圳"],        city: "上海",        hobby: [          {            title: "吃饭",            checked: false,          },          {            title: "睡觉",            checked: false,          },          {            title: "敲代码",            checked: false,          },        ],      },      mark: "",    };  },  mounted() {},  methods: {    doSubmit() {      alert(this.peopleInfo.username);      alert(this.peopleInfo.age);    },  },};&lt;/script&gt;&lt;style scoped&gt;ul {  list-style-type: none;}h2 {  text-align: center;}.people_list {  width: 400px;  margin: 40px auto;  padding: 40px;  border: 1px solid #eee;}.people_list li {  height: 50px;  line-height: 50px;}.form_input {  width: 300px;  height: 28px;}.submit {  float: right;  margin-top: 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六Vue3-x中使用JavaScript表达式-、条件判断、-计算属性和watch侦听"><a href="#六Vue3-x中使用JavaScript表达式-、条件判断、-计算属性和watch侦听" class="headerlink" title="六Vue3.x中使用JavaScript表达式 、条件判断、 计算属性和watch侦听"></a>六<strong>Vue3.x中使用JavaScript表达式 、条件判断、 计算属性和watch侦听</strong></h1><h3 id="一、Vue3-x模板中使用JavaScript表达式"><a href="#一、Vue3-x模板中使用JavaScript表达式" class="headerlink" title="一、Vue3.x模板中使用JavaScript表达式"></a>一、Vue3.x模板中使用JavaScript表达式</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{ number + 1 }}  {{ ok ? "yes" : "no" }}  {{    message      .split("")      .reverse()      .join("-")  }}&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      number: 1,      message: "hello world",    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、-v-if-v-else-v-else-if-v-show"><a href="#二、-v-if-v-else-v-else-if-v-show" class="headerlink" title="二、 v-if v-else v-else-if v-show"></a>二、 v-if v-else v-else-if v-show</h3><h4 id="2-1-v-if"><a href="#2-1-v-if" class="headerlink" title="2.1 v-if"></a>2.1 v-if</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p v-if="flag"&gt;v-if flag=true&lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      flag: 1,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-v-if-v-else"><a href="#2-2-v-if-v-else" class="headerlink" title="2.2 v-if v-else"></a>2.2 v-if v-else</h4><blockquote><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p v-if="Math.random() &gt; 0.5"&gt;大于0.5&lt;/p&gt;  &lt;p v-else&gt;小于0.5&lt;/p&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3、v-else-if"><a href="#2-3、v-else-if" class="headerlink" title="2.3、v-else-if"></a>2.3、v-else-if</h4><blockquote><p>与相似<code>v-else</code>，<code>v-else-if</code>元素必须紧随<code>v-if</code>或<code>v-else-if</code>元素</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div v-if="type === 'A'"&gt;    A  &lt;/div&gt;  &lt;div v-else-if="type === 'B'"&gt;    B  &lt;/div&gt;  &lt;div v-else-if="type === 'C'"&gt;    C  &lt;/div&gt;  &lt;div v-else&gt;    D  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      type: "A",    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4、在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#2-4、在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="2.4、在 <template> 元素上使用 v-if 条件渲染分组"></a>2.4、在 <code>&lt;template&gt;</code> 元素上使用 v-if 条件渲染分组</h4><blockquote><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template v-if="false"&gt;  &lt;h1&gt;Title&lt;/h1&gt;  &lt;p&gt;Paragraph 1&lt;/p&gt;  &lt;p&gt;Paragraph 2&lt;/p&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5、v-show"><a href="#2-5、v-show" class="headerlink" title="2.5、v-show"></a>2.5、v-show</h4><blockquote><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template v-if="false"&gt;  &lt;h2 v-show="ok"&gt;hello&lt;/h2&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      ok: true,    };  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6、v-if-和-v-show的区别"><a href="#2-6、v-if-和-v-show的区别" class="headerlink" title="2.6、v-if 和 v-show的区别"></a>2.6、v-if 和 v-show的区别</h4><blockquote><p>v-if是dom操作，v-show只是css的显示隐藏，一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好。</p></blockquote><h3 id="三、计算属性"><a href="#三、计算属性" class="headerlink" title="三、计算属性"></a>三、计算属性</h3><h4 id="3-1-计算属性入门"><a href="#3-1-计算属性入门" class="headerlink" title="3.1 计算属性入门"></a>3.1 计算属性入门</h4><blockquote><p>1、在模板中表达式非常便利，但是它们实际上只用于简单的操作。</p></blockquote><blockquote><p>2、模板是为了描述视图的结构。在模板中放入太多的逻辑会让模板过重且难以维护。这就是为什么 Vue.js 将绑定表达式限制为一个表达式。如果需要多于一个表达式的逻辑，应当使用计算属性。</p></blockquote><pre class="line-numbers language-VUE" data-language="VUE"><code class="language-VUE">&lt;template&gt;  {{ reverseMsg }}  &lt;button @click="setMsg()"&gt;改变数据&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  data() {    return {      a: 12,      flag: true,      message: "三国演义",    };  },  computed: {    reverseMsg() {      return this.message        .split(" ")        .reverse()        .join("*");    },  },  mounted() {},  methods: {    setMsg() {      this.message = "Ni HAO VUE";    },  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、watch监听数据变化"><a href="#四、watch监听数据变化" class="headerlink" title="四、watch监听数据变化"></a>四、watch监听数据变化</h3><blockquote><p>Vue.js 提供了一个方法 watch ，它用于观察 Vue 实例上的数据变动。当一些数据需要根据其它数据变化时，watch 很诱人 —— 特别是如果你来自 AngularJS 。不过，通常更好的办法是使用计算属性而不是一个命令式的 watch 回调。</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{ fullName }}  &lt;input type="text" v-model="firstName" /&gt;  &lt;input type="text" v-model="lastName" /&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Helloworld",  data() {    return {      firstName: "",      lastName: "",      fullName: "",    };  },  watch: {    firstName: function(val) {      this.fullName = val + this.lastName;    },    lastName: function(val) {      this.fullName = this.firstName + val;    },  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="todoList案例"><a href="#todoList案例" class="headerlink" title="todoList案例"></a>todoList案例</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;Vue实现TodoList&lt;/h2&gt;  &lt;div class="todolist"&gt;    &lt;input type="text" v-model="todo" @keyup.enter="addData()" /&gt;    &lt;hr /&gt;    &lt;h4&gt;正在进行&lt;/h4&gt;    &lt;ul&gt;      &lt;!-- &lt;li v-for="(item, index) in list" :key="index" v-show="!item.checked"&gt;        &lt;input type="checkbox" v-model="item.checked" /&gt;        {{ item.title }}----&lt;button @click="deleteData(index)"&gt;删除&lt;/button&gt;      &lt;/li&gt; --&gt;      &lt;template v-for="(item, index) in list" :key="index"&gt;        &lt;li v-if="!item.checked"&gt;          &lt;input type="checkbox" v-model="item.checked" /&gt;          {{ item.title }}----&lt;button @click="deleteData(index)"&gt;删除&lt;/button&gt;        &lt;/li&gt;      &lt;/template&gt;    &lt;/ul&gt;    &lt;h4&gt;已经完成&lt;/h4&gt;    &lt;ul&gt;      &lt;!-- &lt;li v-for="(item, index) in list" :key="index" v-show="item.checked"&gt;        &lt;input type="checkbox" v-model="item.checked" /&gt;        {{ item.title }}----&lt;button @click="deleteData(index)"&gt;删除&lt;/button&gt;      &lt;/li&gt; --&gt;      &lt;template v-for="(item, index) in list" :key="index"&gt;        &lt;li v-if="item.checked"&gt;          &lt;input            type="checkbox"            v-model="item.checked"            @change="setTodoList()"          /&gt;          {{ item.title }}----&lt;button @click="deleteData(index)"&gt;删除&lt;/button&gt;        &lt;/li&gt;      &lt;/template&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import storage from "../models/storage";export default {  name: "Helloworld",  data() {    return {      todo: "",      list: [],    };  },  mounted() {    console.log("mount");    let todoList = storage.get("todoList");    if (todoList) {      this.list = todoList;    }  },  methods: {    addData() {      this.list.push({        title: this.todo,        checked: false,      });      this.todo = "";      storage.set("todoList", this.list);    },    deleteData(index) {      this.list.splice(index, 1);      storage.set("todoList", this.list);    },    setTodoList() {      storage.set("todoList", this.list);    },  },};&lt;/script&gt;&lt;style scoped&gt;h2 {  text-align: center;}.todolist {  width: 500px;  border: 1px solid #eee;  margin: 0 auto;  padding: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>localStorage封装</strong></p><blockquote><p><strong>1、新建models/storage.js</strong></p><p>2、import storage from ‘./model/storage.js’;</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、-localStorage里面的方法"><a href="#一、-localStorage里面的方法" class="headerlink" title="一、 localStorage里面的方法"></a>一、 localStorage里面的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x父组件给子组件传值、Props、Props验证、单向数据流"><a href="#Vue3-x父组件给子组件传值、Props、Props验证、单向数据流" class="headerlink" title="Vue3.x父组件给子组件传值、Props、Props验证、单向数据流"></a><strong>Vue3.x父组件给子组件传值、Props、Props验证、单向数据流</strong></h1><h3 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h3><h4 id="1、父组件调用子组件的时候传值"><a href="#1、父组件调用子组件的时候传值" class="headerlink" title="1、父组件调用子组件的时候传值"></a>1、父组件调用子组件的时候传值</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;HelloWorld :title="title" /&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from "./components/HelloWorld.vue";export default {  name: "App",  data() {    return {      title: "hello vue",    };  },  components: {    HelloWorld,  },};&lt;/script&gt;&lt;style&gt;#app {}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、子组件接收父组件传值"><a href="#2、子组件接收父组件传值" class="headerlink" title="2、子组件接收父组件传值"></a>2、子组件接收父组件传值</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;{{ title }}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "HelloWorld",  props: ["title"],  data() {    return {};  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Props验证"><a href="#Props验证" class="headerlink" title="Props验证"></a>Props验证</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span>   propA<span class="token operator">:</span> Number<span class="token punctuation">,</span>   <span class="token comment">// 多个可能的类型</span>   propB<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 必填的字符串</span>   propC<span class="token operator">:</span> <span class="token punctuation">{</span>     type<span class="token operator">:</span> String<span class="token punctuation">,</span>     required<span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 带有默认值的数字</span>   propD<span class="token operator">:</span> <span class="token punctuation">{</span>     type<span class="token operator">:</span> Number<span class="token punctuation">,</span>     <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 带有默认值的对象</span>   propE<span class="token operator">:</span> <span class="token punctuation">{</span>     type<span class="token operator">:</span> Object<span class="token punctuation">,</span>     <span class="token comment">// 对象或数组默认值必须从一个工厂函数获取</span>     <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 自定义验证函数</span>   propF<span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 这个值必须匹配下列字符串中的一个</span>       <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 具有默认值的函数</span>   propG<span class="token operator">:</span> <span class="token punctuation">{</span>     type<span class="token operator">:</span> Function<span class="token punctuation">,</span>     <span class="token comment">// 与对象或数组默认值不同，这不是一个工厂函数 —— 这是一个用作默认值的函数</span>     <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">'Default function'</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x父组件主动获取子组件的数据和执行子组件方法-、子组件主动获取父组件的数据和执行父组件方法"><a href="#Vue3-x父组件主动获取子组件的数据和执行子组件方法-、子组件主动获取父组件的数据和执行父组件方法" class="headerlink" title="Vue3.x父组件主动获取子组件的数据和执行子组件方法 、子组件主动获取父组件的数据和执行父组件方法"></a><strong>Vue3.x父组件主动获取子组件的数据和执行子组件方法 、子组件主动获取父组件的数据和执行父组件方法</strong></h1><h3 id="父组件主动获取子组件的数据和执行子组件方法"><a href="#父组件主动获取子组件的数据和执行子组件方法" class="headerlink" title="父组件主动获取子组件的数据和执行子组件方法"></a>父组件主动获取子组件的数据和执行子组件方法</h3><h4 id="调用子组件的时候定义一个ref"><a href="#调用子组件的时候定义一个ref" class="headerlink" title="调用子组件的时候定义一个ref"></a>调用子组件的时候定义一个ref</h4><blockquote><p><v-header ref="header"></v-header></p></blockquote><h4 id="父组件主动获取子组件数据"><a href="#父组件主动获取子组件数据" class="headerlink" title="父组件主动获取子组件数据"></a>父组件主动获取子组件数据</h4><blockquote><p>this.$refs.header.属性</p></blockquote><h4 id="父组件主动执行子组件方法"><a href="#父组件主动执行子组件方法" class="headerlink" title="父组件主动执行子组件方法"></a>父组件主动执行子组件方法</h4><blockquote><p>this.$refs.header.方法</p></blockquote><h3 id="子组件主动获取父组件的数据和执行父组件方法"><a href="#子组件主动获取父组件的数据和执行父组件方法" class="headerlink" title="子组件主动获取父组件的数据和执行父组件方法"></a>子组件主动获取父组件的数据和执行父组件方法</h3><h4 id="子组件主动获取父组件的数据"><a href="#子组件主动获取父组件的数据" class="headerlink" title="子组件主动获取父组件的数据"></a>子组件主动获取父组件的数据</h4><blockquote><p>this.$parent.数据</p></blockquote><h4 id="子组件主动获取父组件的数据-1"><a href="#子组件主动获取父组件的数据-1" class="headerlink" title="子组件主动获取父组件的数据"></a>子组件主动获取父组件的数据</h4><blockquote><p>this.$parent.方法</p></blockquote><h3 id="Vue3-x组件自定义事件实现子组件给父组件传值"><a href="#Vue3-x组件自定义事件实现子组件给父组件传值" class="headerlink" title="Vue3.x组件自定义事件实现子组件给父组件传值"></a>Vue3.x组件自定义事件实现子组件给父组件传值</h3><blockquote><p>ue官方推荐你始终使用 <strong>kebab-case 的事件名</strong>。</p></blockquote><p><strong>子组件DatePicker.vue</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;button @click="run"&gt;通过广播方式实现子组件给父组件传值&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {    // 建议定义所有发出的事件，以便更好地记录组件应该如何工作。    emits: ["run-parent"],    data() {        return {}    },    methods: {        run() {            this.$emit("run-parent", "这是子组件穿过来的值")        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>父组件Home.vue</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    &lt;date-picker @run-parent="getChild"&gt;    &lt;/date-picker&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import DatePicker from "./DatePicker"export default {    data() {        return {            title: "你好vue"        }    },    components: {        DatePicker    },    methods: {        getChild(data) {            alert(data)        }    }}&lt;/script&gt;&lt;style lang="scss"&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x组件自定义事件验证"><a href="#Vue3-x组件自定义事件验证" class="headerlink" title="Vue3.x组件自定义事件验证"></a>Vue3.x组件自定义事件验证</h3><p><strong>子组件：</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;input type="text" v-model="username" /&gt;&lt;br&gt;&lt;br&gt;&lt;input type="text" v-model="password" /&gt;&lt;br&gt;&lt;br&gt;&lt;button @click="run"&gt;通过广播方式实现子组件给父组件传值&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {    // 建议定义所有发出的事件，以便更好地记录组件应该如何工作。    emits: {        submit: ({            username,            password        }) =&gt; {            if (username &amp;&amp; password) {                return true            } else {                console.warn('传入的参数不能为空!')                return false            }        }    },    data() {        return {            username: "张三",            password: ""        }    },    methods: {        run() {            this.$emit("submit", {                username: this.username,                password: this.password            })        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>父亲组件：</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    &lt;login @submit="getChild"&gt;    &lt;/login&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Login from "./Login"export default {    data() {        return {            title: "你好vue"        }    },    components: {        Login    },    methods: {        getChild(data) {            alert(data)        }    }}&lt;/script&gt;&lt;style lang="scss"&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue3-x第三方插件mitt-实现非父子组件传值"><a href="#vue3-x第三方插件mitt-实现非父子组件传值" class="headerlink" title="vue3.x第三方插件mitt 实现非父子组件传值"></a>vue3.x第三方插件mitt 实现非父子组件传值</h3><p><a href="https://github.com/developit/mitt">https://github.com/developit/mitt</a></p><blockquote><p>Vue3.x以后从实例中移除了 <code>$on</code>，<code>$off</code> 和 <code>$once</code> 方法，<code>$emit</code> 仍然是现有 API 的一部分，只能实现子组件触发父组件的方法。</p></blockquote><p><strong>使用mitt之前先安装mitt模块</strong></p><blockquote><p>npm install –save mitt</p></blockquote><h4 id="新建model-event-js"><a href="#新建model-event-js" class="headerlink" title="新建model/event.js"></a>新建model/event.js</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">'mitt'</span><span class="token keyword">const</span> VueEvent <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> VueEvent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Header组件"><a href="#Header组件" class="headerlink" title="Header组件"></a>Header组件</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    &lt;button @click="doLogin"&gt;非父子组件传值&lt;/button&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import VueEvent from '../model/event'export default {    data() {        return {}    },    methods: {        doLogin() {            VueEvent.emit("login");        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Login组件"><a href="#Login组件" class="headerlink" title="Login组件"></a>Login组件</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;我是用户登录组件&lt;/template&gt;&lt;script&gt;import VueEvent from '../model/event'export default {      mounted() {        VueEvent.on("login", () =&gt; {            alert("doLogin")        })    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x中全局绑定属性、使用Axios和fetchJsonp请求真实api接口数据、函数防抖实现百度搜索"><a href="#Vue3-x中全局绑定属性、使用Axios和fetchJsonp请求真实api接口数据、函数防抖实现百度搜索" class="headerlink" title="Vue3.x中全局绑定属性、使用Axios和fetchJsonp请求真实api接口数据、函数防抖实现百度搜索"></a><strong>Vue3.x中全局绑定属性、使用Axios和fetchJsonp请求真实api接口数据、函数防抖实现百度搜索</strong></h1><h3 id="Vue3-x中使用Axios请求远程真实Api接口数据"><a href="#Vue3-x中使用Axios请求远程真实Api接口数据" class="headerlink" title="Vue3.x中使用Axios请求远程真实Api接口数据"></a>Vue3.x中使用Axios请求远程真实Api接口数据</h3><blockquote><p><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p></blockquote><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a><strong>1、安装</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install axios <span class="token operator">--</span>save  或者yarn add axios或者cnpm install axios <span class="token operator">--</span>save <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、引入使用"><a href="#2、引入使用" class="headerlink" title="2、引入使用"></a><strong>2、引入使用</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// handle success</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// handle error</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// always executed</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a><strong>完整代码：</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click="getData()"&gt;获取数据&lt;/button&gt;  &lt;ul v-for="(item, index) in list" :key="index"&gt;    &lt;li&gt;{{ item.title }}&lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "VueprojectAxios",  data() {    return {      list: [],    };  },  mounted() {},  methods: {    getData() {      var api =        "http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page=1";      this.Axios(api)        .then((res) =&gt; {          // console.log(res.data.result);          this.list = res.data.result;          console.log(this.list);        })        .catch((err) =&gt; {          console.log(err);        });    },  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x全局绑定Axios"><a href="#Vue3-x全局绑定Axios" class="headerlink" title="Vue3.x全局绑定Axios"></a>Vue3.x全局绑定Axios</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">var</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>axios<span class="token operator">=</span>axiosapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x中使用fetch-jsonp请求jsonp接口"><a href="#Vue3-x中使用fetch-jsonp请求jsonp接口" class="headerlink" title="Vue3.x中使用fetch-jsonp请求jsonp接口"></a>Vue3.x中使用fetch-jsonp请求jsonp接口</h3><p>axios不支持jsonp请求，如果我们要用jsonp来请求数据可以使用fetch-jsonp这个模块。</p><blockquote><p><a href="https://github.com/camsong/fetch-jsonp">https://github.com/camsong/fetch-jsonp</a></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchJsonp</span><span class="token punctuation">(</span>        <span class="token string">"https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=php"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> jsonpCallback<span class="token operator">:</span> <span class="token string">"cb"</span> <span class="token punctuation">}</span>      <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parsing failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用函数防抖实现百度搜索"><a href="#使用函数防抖实现百度搜索" class="headerlink" title="使用函数防抖实现百度搜索"></a>使用函数防抖实现百度搜索</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div class="home"&gt;    &lt;button @click="getData()"&gt;获取数据&lt;/button&gt;    &lt;input type="text" v-model="keyword" @keyup="getData" /&gt;    &lt;br&gt;    &lt;ul&gt;        &lt;li v-for="(item,index) in list" :key="index"&gt;{{item}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import fetchJsonp from 'fetch-jsonp';export default {    data() {        return {            keyword: "",            list: [],            timer: ""        }    },    methods: {        getData() {            if (this.keyword != "") {                clearTimeout(this.timer);                this.timer = setTimeout(() =&gt; {                    var api = "https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=" + this.keyword                    fetchJsonp(api, {                            jsonpCallback: 'cb',                        })                        .then(function (response) {                            return response.json()                        }).then((json) =&gt; {                            this.list = json.s                        })                }, 200)            }        }    },}&lt;/script&gt;&lt;style lang="scss"&gt;.home {    padding: 20px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x中的mixin介绍使用"><a href="#Vue3-x中的mixin介绍使用" class="headerlink" title="Vue3.x中的mixin介绍使用"></a>Vue3.x中的mixin介绍使用</h1><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><p><strong>1、新建mixin/base.js</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> baseMixin <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span><span class="token punctuation">{</span>            apiDomain<span class="token operator">:</span> <span class="token string">"http://www.itying.com"</span>       <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'succss'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、使用mixin</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    首页模板--{{apiDomain}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BaseMixin from '../mixin/base'export default {    mixins: [BaseMixin],    data() {        return {        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于Mixin的选项合并"><a href="#关于Mixin的选项合并" class="headerlink" title="关于Mixin的选项合并"></a>关于Mixin的选项合并</h3><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p><p><strong>1、比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      foo<span class="token operator">:</span> <span class="token string">'abc'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token operator">:</span> <span class="token string">'goodbye'</span><span class="token punctuation">,</span>      bar<span class="token operator">:</span> <span class="token string">'def'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span> <span class="token comment">// =&gt; { message: "goodbye", foo: "abc", bar: "def" }</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mixin hook called'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'component hook called'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// =&gt; "混入对象的钩子被调用"</span><span class="token comment">// =&gt; "组件钩子被调用"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、值为对象的选项，例如 <code>methods</code>、<code>components</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">conflicting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'from mixin'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">conflicting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'from self'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#mixins-basic'</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; "foo"</span>vm<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; "bar"</span>vm<span class="token punctuation">.</span><span class="token function">conflicting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; "from self"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局配置Mixin"><a href="#全局配置Mixin" class="headerlink" title="全局配置Mixin"></a>全局配置Mixin</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  myOption<span class="token operator">:</span> <span class="token string">'hello!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 为自定义的选项 'myOption' 注入一个处理器。</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> myOption <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>myOption    <span class="token keyword">if</span> <span class="token punctuation">(</span>myOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#mixins-global'</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; "hello!"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> BaseMixin <span class="token keyword">from</span> <span class="token string">'./mixin/base'</span><span class="token comment">//原来的代码</span><span class="token comment">// createApp(App).mount('#app')</span><span class="token comment">//修改后的代码</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>BaseMixin<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x-Teleport、使用Teleport自定义一个模态对话框的组件"><a href="#Vue3-x-Teleport、使用Teleport自定义一个模态对话框的组件" class="headerlink" title="Vue3.x Teleport、使用Teleport自定义一个模态对话框的组件"></a><strong>Vue3.x Teleport、使用Teleport自定义一个模态对话框的组件</strong></h1><p>Vue3.x中的组件模板属于该组件，有时候我们想把模板的内容移动到当前组件之外的DOM 中，这个时候就可以使用 Teleport。</p><p>表示teleport内包含的内容显示到body中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;teleport to="body"&gt;内容&lt;/teleport&gt;&lt;teleport to="#app"&gt;内容&lt;/teleport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Modal.vue</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;teleport to="body"&gt;    &lt;div class="model-bg" v-show="visible"&gt;      &lt;div class="modal-content"&gt;        &lt;button class="close" @click="$emit('close-model')"&gt;X&lt;/button&gt;        &lt;div class="model-title"&gt;{{ title }}&lt;/div&gt;        &lt;div class="model-body"&gt;          &lt;slot&gt;            第一个对话框          &lt;/slot&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/teleport&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "VueprojectTeleport",  props: ["visible", "title"],  data() {    return {};  },  mounted() {},  methods: {},};&lt;/script&gt;&lt;style scoped&gt;.model-bg {  background: #000;  opacity: 0.7;  width: 100%;  height: 100%;  position: absolute;  top: 0px;}.modal-content {  width: 600px;  min-height: 300px;  border: 1px solid #eee;  position: absolute;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);  background: #fff;  .model-title {    background: #eee;    color: #000;    height: 32px;    line-height: 32px;    text-align: center;  }  .model-body {    padding: 40px;  }  .close {    position: absolute;    right: 10px;    top: 5px;    padding: 5px;    border: none;    cursor: pointer;  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Home.vue使用model</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div class="home"&gt;    &lt;button @click="isVisible=true"&gt;弹出一个模态对话框&lt;/button&gt;    &lt;modal :visible="isVisible" :title="用户登录" @close-model="isVisible=false"&gt;&lt;/modal&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Modal from "./Modal"export default {    data() {        return {            isVisible: false        }    },    components: {        Modal    }}&lt;/script&gt;&lt;style lang="scss"&gt;.home {    position: relative;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x-Composition-API-详解"><a href="#Vue3-x-Composition-API-详解" class="headerlink" title="Vue3.x Composition API 详解"></a><strong>Vue3.x Composition API 详解</strong></h1><p><strong>compositon-api提供了以下几个函数：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">setuprefreactivewatchEffectwatchcomputedtoRefs生命周期的hooks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setup-组件选项"><a href="#setup-组件选项" class="headerlink" title="setup 组件选项"></a><code>setup</code> 组件选项</h3><p>新的 <code>setup</code> 组件选项在<strong>创建组件之前</strong>执行，一旦 <code>props</code> 被解析，并充当合成 API 的入口点。</p><p><strong>提示：</strong></p><pre class="line-numbers language-none"><code class="language-none">由于在执行 setup 时尚未创建组件实例，因此在 setup 选项中没有 this。这意味着，除了props 之外，你将无法访问组件中声明的任何属性——本地状态、计算属性或方法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>setup</code> 函数时，它将接受两个参数：</p><ol><li><code>props</code></li><li><code>context</code></li></ol><p>让我们更深入地研究如何使用每个参数。</p><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><p><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 prop 时，它将被更新。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">export default {  props: {    title: String  },  setup(props) {    console.log(props.title)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{ msg }}  &lt;input type="text" v-model="msg" /&gt;  &lt;button @click="getMsg()"&gt;获取msg&lt;/button&gt;  &lt;button @click="setMsg()"&gt;修改msg&lt;/button&gt;  &lt;br /&gt;  {{ userInfo.username }}---{{ userInfo.age }}  &lt;br /&gt;  &lt;button @click="getUserName()"&gt;获取username&lt;/button&gt;  &lt;button @click="setUserName()"&gt;修改username&lt;/button&gt;  &lt;br /&gt;  {{ title }}  &lt;input type="text" v-model="title" /&gt;&lt;/template&gt;&lt;script&gt;import { ref, reactive, toRefs } from "vue";export default {  name: "VueprojectHome",  setup() {    const msg = ref("hello");    const userInfo = reactive({      username: "make",      age: 18,    });    const article = reactive({      title: "hello vue",      auth: "coder",    });    const getMsg = () =&gt; {      alert(msg.value);    };    var getUserName = () =&gt; {      alert(userInfo.username);    };    const setMsg = () =&gt; {      msg.value = "修改后的msg";    };    var setUserName = () =&gt; {      userInfo.username = "axl";    };    return {      msg,      userInfo,      ...toRefs(article),      getUserName,      getMsg,      setMsg,      setUserName,    };  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;获取用户信息&lt;/h2&gt;    &lt;input type="text" v-model="firstName" placeholder="firstName" /&gt;    &lt;input type="text" v-model="lastName" placeholder="lastName" /&gt;    {{ fullName }}    &lt;input type="text" v-model="score" placeholder="score" /&gt;    {{ pass }}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { reactive, toRefs, computed } from "vue";export default {  setup() {    const userInfo = reactive({      firstName: "",      lastName: "",      score: 60,    });    let fullName = computed(() =&gt; {      return userInfo.firstName + " " + userInfo.lastName;    });    let pass = computed(() =&gt; {      if (userInfo.score &gt; 60) {        return "及格";      } else {        return "不及格";      }    });    return {      ...toRefs(userInfo),      fullName,      pass,    };  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch-、watch-与watchEffect区别"><a href="#watch-、watch-与watchEffect区别" class="headerlink" title="watch 、watch 与watchEffect区别"></a>watch 、watch 与watchEffect区别</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{ num }}  &lt;input type="text" v-model="msg" /&gt;  {{ msg }}&lt;/template&gt;&lt;script&gt;import { ref, reactive, toRefs, watch } from "vue";export default {  setup() {    let msg = ref("");    let data = reactive({      num: 1,      count: 1,    });    watch(msg, (newData, oldData) =&gt; {      console.log(newData, oldData);    });    // watch(data, () =&gt; {    //   console.log(`num=${data.num}`);    // },);    // watchEffect(() =&gt; {    //   console.log(`num=${data.num}`);    // });    setInterval(() =&gt; {      data.num++;    }, 1000);    return {      ...toRefs(data),      msg,    };  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合式api生命周期钩子"><a href="#组合式api生命周期钩子" class="headerlink" title="组合式api生命周期钩子"></a>组合式api生命周期钩子</h3><p>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><p>下表包含如何在 <a href="https://v3.cn.vuejs.org/guide/composition-api-setup.html">setup ()</a> 内部调用生命周期钩子：</p><table><thead><tr><th align="left">选项式 API</th><th align="left">Hook inside <code>setup</code></th></tr></thead><tbody><tr><td align="left"><code>beforeCreate</code></td><td align="left">Not needed*</td></tr><tr><td align="left"><code>created</code></td><td align="left">Not needed*</td></tr><tr><td align="left"><code>beforeMount</code></td><td align="left"><code>onBeforeMount</code></td></tr><tr><td align="left"><code>mounted</code></td><td align="left"><code>onMounted</code></td></tr><tr><td align="left"><code>beforeUpdate</code></td><td align="left"><code>onBeforeUpdate</code></td></tr><tr><td align="left"><code>updated</code></td><td align="left"><code>onUpdated</code></td></tr><tr><td align="left"><code>beforeUnmount</code></td><td align="left"><code>onBeforeUnmount</code></td></tr><tr><td align="left"><code>unmounted</code></td><td align="left"><code>onUnmounted</code></td></tr><tr><td align="left"><code>errorCaptured</code></td><td align="left"><code>onErrorCaptured</code></td></tr><tr><td align="left"><code>renderTracked</code></td><td align="left"><code>onRenderTracked</code></td></tr><tr><td align="left"><code>renderTriggered</code></td><td align="left"><code>onRenderTriggered</code></td></tr></tbody></table><p>因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// mounted</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Component is mounted!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Provider-Inject"><a href="#Provider-Inject" class="headerlink" title="Provider Inject"></a>Provider Inject</h3><h4 id="非组合式api中的写法："><a href="#非组合式api中的写法：" class="headerlink" title="非组合式api中的写法："></a><strong>非组合式api中的写法：</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- src/components/MyMap.vue --&gt;&lt;template&gt;  &lt;MyMarker /&gt;&lt;/template&gt;&lt;script&gt;import MyMarker from './MyMarker.vue'export default {  components: {    MyMarker  },  provide: {    location: 'North Pole',    geolocation: {      longitude: 90,      latitude: 135    }  }}&lt;/script&gt;&lt;!-- src/components/MyMarker.vue --&gt;&lt;script&gt;export default {  inject: ['location', 'geolocation']}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组合式api中的写法："><a href="#组合式api中的写法：" class="headerlink" title="组合式api中的写法："></a><strong>组合式api中的写法：</strong></h4><p><strong>父组件：</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;根组件title---{{ title }}&lt;/h1&gt;  &lt;br /&gt;  username:&lt;input    type="text"    v-model="userInfo.username"    placeholder="username"  /&gt;  age:&lt;input type="text" v-model="userInfo.age" placeholder="username" /&gt;  &lt;br /&gt;  {{ userInfo.username }}---{{ userInfo.age }}  &lt;User&gt;&lt;/User&gt;&lt;/template&gt;&lt;script&gt;import { ref, provide, reactive } from "vue";import User from "./components/User";export default {  setup() {    let title = ref("app跟组件的title");    let userInfo = reactive({      username: "coder",      age: 20,    });    setInterval(() =&gt; {      title.value = "改变后的title";    }, 2000);    provide("title", title);    provide("userInfo", userInfo);    return {      title,      userInfo,    };  },  components: {    User,  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子组件：</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h2&gt;子组件的title---{{ title }}&lt;/h2&gt;  &lt;br /&gt;  username:&lt;input    type="text"    v-model="userInfo.username"    placeholder="username"  /&gt;  age:&lt;input type="text" v-model="userInfo.age" placeholder="username" /&gt;  {{ userInfo.username }}---{{ userInfo.age }}&lt;/template&gt;&lt;script&gt;import { inject } from "vue";export default {  setup() {    let title = inject("title");    let userInfo = inject("userInfo");    return {      title,      userInfo,    };  },};&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue3-x集成Typescript"><a href="#Vue3-x集成Typescript" class="headerlink" title="Vue3.x集成Typescript"></a>Vue3.x集成Typescript</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"># <span class="token number">1.</span> Install Vue <span class="token constant">CLI</span><span class="token punctuation">,</span> <span class="token keyword">if</span> it's not already installednpm install <span class="token operator">--</span>global @vue<span class="token operator">/</span>cli# <span class="token number">2.</span> Create a <span class="token keyword">new</span> <span class="token class-name">project</span><span class="token punctuation">,</span> then choose the <span class="token string">"Manually select features"</span> optionvue create my<span class="token operator">-</span>project<span class="token operator">-</span>name# If you already have a Vue <span class="token constant">CLI</span> project without TypeScript<span class="token punctuation">,</span> please add a proper Vue <span class="token constant">CLI</span> plugin<span class="token operator">:</span>vue add typescript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x集成Typescript后定义组件"><a href="#Vue3-x集成Typescript后定义组件" class="headerlink" title="Vue3.x集成Typescript后定义组件"></a>Vue3.x集成Typescript后定义组件</h3><blockquote><p>vue3.x中集成ts后请确保组件的 <code>script</code> 部分已将语言设置为 TypeScript</p></blockquote><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script lang="ts"&gt;  ...&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要让 TypeScript 正确推断 Vue 组件选项中的类型，需要使用 <code>defineComponent</code> 全局方法定义组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import { defineComponent } from 'vue'const Component = defineComponent({  // 已启用类型推断})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义一个基于ts的Home组件"><a href="#定义一个基于ts的Home组件" class="headerlink" title="定义一个基于ts的Home组件"></a><strong>定义一个基于ts的Home组件</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    home组件    &lt;br&gt;    {{book.title}}    &lt;br&gt;    {{book.author}}    &lt;br&gt;    {{book.year}}    &lt;br&gt;&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent} from 'vue';export default defineComponent({    name: 'App',    data() {        return {            book: {                title: 'Vue 3 Guide',                author: 'Vue Team',                year: 2020            }        }    }});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义一个接口约束Home组件中data的数据类型"><a href="#定义一个接口约束Home组件中data的数据类型" class="headerlink" title="定义一个接口约束Home组件中data的数据类型"></a>定义一个接口约束Home组件中data的数据类型</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    home组件    &lt;br /&gt;    {{ book.title }}    &lt;br /&gt;    {{ book.author }}    &lt;br /&gt;    {{ book.year }}    &lt;br /&gt;&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent} from 'vue';interface Book {    title: string    author: string    year: number}var book: Book = {    title: 'Vue 3 Guide',    author: 'Vue Team',    year: 2020}export default defineComponent({    name: 'App',    data() {        return {            book        }    }});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法、计算属性中约束数据类型"><a href="#方法、计算属性中约束数据类型" class="headerlink" title="方法、计算属性中约束数据类型"></a><strong>方法、计算属性中约束数据类型</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    home组件    &lt;br /&gt; &lt;br /&gt;    {{ book.title }}    &lt;br /&gt; &lt;br /&gt;    {{ book.author }}    &lt;br /&gt; &lt;br /&gt;    {{ book.year }}    &lt;br /&gt; &lt;br /&gt;    &lt;button @click="setTitle()"&gt;设置数据&lt;/button&gt;    &lt;br /&gt; &lt;br /&gt;    {{greeting}}&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent} from 'vue';interface Book {    title: string    author: string    year: number}var book: Book = {    title: 'Vue 3 Guide',    author: 'Vue Team',    year: 2020}export default defineComponent({    name: 'App',    data() {        return {            book        }    },    methods: {        setTitle(): void {            this.book.title = "你好vue3.0"        }    },    computed: {        // 需要注释        greeting(): string {            return this.book.title + '!'        }    }});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x集成Typescript与组合式-API-一起使用"><a href="#Vue3-x集成Typescript与组合式-API-一起使用" class="headerlink" title="Vue3.x集成Typescript与组合式 API 一起使用"></a>Vue3.x集成Typescript与组合式 API 一起使用</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    home组件&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent,    ref,    reactive} from 'vue';interface Book {    title: string    year ? : number}export default defineComponent({    name: 'App',    setup() {        const year1 = ref &lt; string | number &gt; ('2020');        const book1 = reactive &lt; Book &gt; ({            title: 'Vue 3 Guide'        })        // or        const book2: Book = reactive({            title: 'Vue 3 Guide'        })        // or        const book3 = reactive({            title: 'Vue 3 Guide'        }) as Book        return {            year1,            book1,            book2,            book3        }    }});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="**Vue-Router **"></a>**Vue-Router **</h1><h3 id="Vue3-x中的路由"><a href="#Vue3-x中的路由" class="headerlink" title="Vue3.x中的路由"></a>Vue3.x中的路由</h3><blockquote><p><a href="https://next.router.vuejs.org/">https://next.router.vuejs.org/</a></p></blockquote><p><code>npm install vue-router@next --save</code></p><h3 id="Vue3-x路由的基本配置"><a href="#Vue3-x路由的基本配置" class="headerlink" title="Vue3.x路由的基本配置"></a><strong>Vue3.x路由的基本配置</strong></h3><h4 id="1、安装路由模块"><a href="#1、安装路由模块" class="headerlink" title="1、安装路由模块"></a><strong>1、安装路由模块</strong></h4><p><code>npm install vue-router@next  --save</code></p><h4 id="2、新建组件"><a href="#2、新建组件" class="headerlink" title="2、新建组件"></a><strong>2、新建组件</strong></h4><p><code>components/Home.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    Home组件&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent,} from 'vue';export default defineComponent({    name: 'Home',});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;components/News.vue&lt;template&gt;&lt;div&gt;    News组件&lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent,} from 'vue';export default defineComponent({    name: 'News',});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、配置路由"><a href="#3、配置路由" class="headerlink" title="3、配置路由"></a><strong>3、配置路由</strong></h4><p>新建src/routes.ts 配置路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span>createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home.vue"</span><span class="token keyword">import</span> News <span class="token keyword">from</span> <span class="token string">"./components/News.vue"</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 4. Provide the history implementation to use. We are using the hash history for simplicity here.</span>  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> News <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、挂载路由"><a href="#4、挂载路由" class="headerlink" title="4、挂载路由"></a><strong>4、挂载路由</strong></h4><p>在main.ts中挂载路由</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token comment">// createApp(App).mount('#app')</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token comment">//挂载路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、渲染组件"><a href="#5、渲染组件" class="headerlink" title="5、渲染组件"></a><strong>5、渲染组件</strong></h4><p>App.vue中通过router-view渲染组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;ul&gt;    &lt;li&gt;        &lt;router-link to="/"&gt;首页&lt;/router-link&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;router-link to="/news"&gt;新闻&lt;/router-link&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import {    defineComponent} from 'vue';export default defineComponent({    name: 'App',});&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x动态路由"><a href="#Vue3-x动态路由" class="headerlink" title="Vue3.x动态路由"></a>Vue3.x动态路由</h3><h4 id="1、配置动态路由"><a href="#1、配置动态路由" class="headerlink" title="1、配置动态路由"></a><strong>1、配置动态路由</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 4. Provide the history implementation to use. We are using the hash history for simplicity here.</span>  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> News <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/newsContent/:id'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> NewsContent <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、路由跳转"><a href="#2、路由跳转" class="headerlink" title="2、路由跳转"></a><strong>2、路由跳转</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for="(item,index) in list" :key="index"&gt;&lt;router-link :to="`/newsContent/${index}`"&gt;{{item}}&lt;/router-link&gt;&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、获取路由"><a href="#3、获取路由" class="headerlink" title="3、获取路由"></a><strong>3、获取路由</strong></h4><p><code>this.$route.params</code></p><h3 id="Vue3-x-Get传值"><a href="#Vue3-x-Get传值" class="headerlink" title="Vue3.x Get传值"></a>Vue3.x Get传值</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to="/newsContent?id=2"&gt;Get传值&lt;/router-link&gt;this.$route.query<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x路由编程式导航-Js跳转路由"><a href="#Vue3-x路由编程式导航-Js跳转路由" class="headerlink" title="Vue3.x路由编程式导航(Js跳转路由)"></a>Vue3.x路由编程式导航(Js跳转路由)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'news'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     path<span class="token operator">:</span> <span class="token string">'/newsContent/495'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/newscontent'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span><span class="token punctuation">{</span>aid<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/newscontent/123'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3-x路由HTML5-History-模式和-hash-模式"><a href="#Vue3-x路由HTML5-History-模式和-hash-模式" class="headerlink" title="Vue3.x路由HTML5 History 模式和 hash 模式"></a>Vue3.x路由HTML5 History 模式和 hash 模式</h3><h4 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>#<span class="token operator">/</span>userhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>#<span class="token operator">/</span>news<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果想把上面的路由改变成下面方式:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>newshttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们就可以使用HTML5 History 模式</p><h4 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>开启Html5 History模式后，发布到服务器需要配置伪静态：</p><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a></p><h3 id="Vue3-x命名路由"><a href="#Vue3-x命名路由" class="headerlink" title="Vue3.x命名路由"></a>Vue3.x命名路由</h3><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> User    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要链接到一个命名路由，可以给 <code>router-link</code> 的 <code>to</code> 属性传一个对象：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>user<span class="token punctuation">'</span>, params: { userId: 123 }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这跟代码调用 <code>router.push()</code> 是一回事：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两种方式都会把路由导航到 <code>/user/123</code> 路径。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'content'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">{</span>aid<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>重定向也在<code>routes</code>配置中完成。要从重定向<code>/a</code>到<code>/b</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重定向也可以针对命名路由：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'homepage'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>甚至使用函数进行动态重定向：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token comment">// /search/screens -&gt; /search?q=screens</span>    path<span class="token operator">:</span> <span class="token string">'/search/:searchText'</span><span class="token punctuation">,</span>    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// the function receives the target route as the argument</span>      <span class="token comment">// we return a redirect path/location here.</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/search'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{</span> q<span class="token operator">:</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>searchText <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/search'</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相对重定向"><a href="#相对重定向" class="headerlink" title="相对重定向"></a>相对重定向</h4><p>也可以重定向到相对位置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/users/:id/posts'</span><span class="token punctuation">,</span>    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// the function receives the target route as the argument</span>      <span class="token comment">// return redirect path/location here.</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h3><p>重定向是指用户访问时<code>/home</code>，URL将被替换<code>/</code>，然后与匹配<code>/</code>。但是什么是别名？</p><p><strong>别名<code>/</code>as<code>/home</code>表示用户访问时<code>/home</code>，URL保持不变<code>/home</code>，但将被匹配，就像用户正在访问时一样<code>/</code>。</strong></p><p>以上内容可以在路由配置中表示为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Homepage<span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">'/home'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名使您可以自由地将UI结构映射到任意URL，而不受配置的嵌套结构的约束。使别名以a开头，<code>/</code>以使路径在嵌套路由中是绝对的。您甚至可以将两者结合起来，并为数组提供多个别名：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/users'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> UsersLayout<span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// this will render the UserList for these 3 URLs</span>      <span class="token comment">// - /users</span>      <span class="token comment">// - /users/list</span>      <span class="token comment">// - /people</span>      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UserList<span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'/people'</span><span class="token punctuation">,</span> <span class="token string">'list'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您的路线包含参数，请确保将其包含在任何绝对别名中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/users/:id'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> UsersByIdLayout<span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// this will render the UserDetails for these 3 URLs</span>      <span class="token comment">// - /users/24</span>      <span class="token comment">// - /users/24/profile</span>      <span class="token comment">// - /24</span>      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'/:id'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p><img src="C:/Users/Arosy/AppData/Roaming/Typora/typora-user-images/image-20211016174942869.png" alt="image-20211016174942869"></p><p>配置News组件的子组件</p><h4 id="1、新建news-Add-vue"><a href="#1、新建news-Add-vue" class="headerlink" title="1、新建news/Add.vue"></a><strong>1、新建news/Add.vue</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div&gt;      增加新闻    &lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import { defineComponent } from 'vue';export default defineComponent({    data(){        return{}    },methods:{                    }})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、新建news-Edit-vue"><a href="#2、新建news-Edit-vue" class="headerlink" title="2、新建news/Edit.vue"></a><strong>2、新建news/Edit.vue</strong></h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div&gt;      修改新闻    &lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import { defineComponent } from 'vue';export default defineComponent({    data(){        return{          }    },methods:{           }})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、配置嵌套路由"><a href="#3、配置嵌套路由" class="headerlink" title="3、配置嵌套路由"></a>3、配置嵌套路由</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入组件</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home.vue"</span><span class="token keyword">import</span> News <span class="token keyword">from</span> <span class="token string">"./components/News.vue"</span><span class="token keyword">import</span> NewsAdd <span class="token keyword">from</span> <span class="token string">"./components/News/Add.vue"</span><span class="token keyword">import</span> NewsEdit <span class="token keyword">from</span> <span class="token string">"./components/News/Edit.vue"</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">"./components/User.vue"</span><span class="token comment">//配置路由</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    routes<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Home<span class="token punctuation">,</span> alias<span class="token operator">:</span> <span class="token string">'/home'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token operator">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> News<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">//子路由</span>                <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span><span class="token string">"/news/add"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> NewsAdd <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'edit'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> NewsEdit <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、News-vue中挂载路由"><a href="#4、News-vue中挂载路由" class="headerlink" title="4、News.vue中挂载路由"></a>4、News.vue中挂载路由</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="content"&gt;    &lt;div class="left"&gt;      &lt;ul&gt;        &lt;li&gt;&lt;router-link to="/news/add"&gt;增加新闻&lt;/router-link&gt;&lt;/li&gt;        &lt;li&gt;&lt;router-link to="/news/edit"&gt;修改新闻&lt;/router-link&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;    &lt;div class="right"&gt;          &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script lang="ts"&gt;import { defineComponent } from "vue";export default defineComponent({  data() {    return {};  },});&lt;/script&gt;&lt;style lang="scss"&gt;.content {  display: flex;  padding: 20px;  .left {    width: 200px;    border-right: 1px solid #ddd;    min-height: 400px;  }  .right {    flex: 1;  }}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vuex教程-Vuex-中的-State-Mutation-Getters-mapGetters-Actions-Modules"><a href="#Vuex教程-Vuex-中的-State-Mutation-Getters-mapGetters-Actions-Modules" class="headerlink" title="Vuex教程-Vuex 中的 State Mutation Getters mapGetters Actions Modules"></a><strong>Vuex教程-Vuex 中的 State Mutation Getters mapGetters Actions Modules</strong></h1><h2 id="一、Vuex"><a href="#一、Vuex" class="headerlink" title="一、Vuex"></a>一、Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>官网：<a href="https://next.vuex.vuejs.org/">https://next.vuex.vuejs.org/</a></p><h5 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a><strong>主要功能：</strong></h5><p>1、vuex可以实现vue不同组件之间的状态共享  （解决了不同组件之间的数据共享）</p><p>2、可以实现组件里面数据的持久化。</p><h5 id="Vuex的几个核心概念："><a href="#Vuex的几个核心概念：" class="headerlink" title="Vuex的几个核心概念："></a><strong>Vuex的几个核心概念：</strong></h5><p>State</p><p>Getters</p><p>Mutations</p><p>Actions</p><p>Modules</p><h3 id="二、Vuex的基本使用"><a href="#二、Vuex的基本使用" class="headerlink" title="二、Vuex的基本使用"></a>二、Vuex的基本使用</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><h5 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install vuex@next <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add vuex@next <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、src目录下面新建一个vuex的文件夹，vuex-文件夹里面新建一个store-js"><a href="#2、src目录下面新建一个vuex的文件夹，vuex-文件夹里面新建一个store-js" class="headerlink" title="2、src目录下面新建一个vuex的文件夹，vuex 文件夹里面新建一个store.js"></a>2、src目录下面新建一个vuex的文件夹，vuex 文件夹里面新建一个store.js</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、main-ts中挂载Vuex"><a href="#3、main-ts中挂载Vuex" class="headerlink" title="3、main.ts中挂载Vuex"></a>3、main.ts中挂载Vuex</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> route <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./vuex/store'</span><span class="token keyword">let</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//挂载路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token comment">//挂载vuex</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、获取-修改state里面的数据"><a href="#4、获取-修改state里面的数据" class="headerlink" title="4、获取 修改state里面的数据"></a>4、获取 修改state里面的数据</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      增加新闻<span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"incCount"</span><span class="token operator">&gt;</span>改变Vuex里面的count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">incCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>number<span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Vuex中的State"><a href="#三、Vuex中的State" class="headerlink" title="三、Vuex中的State"></a>三、Vuex中的State</h3><p>State在Vuex中主要用于存储数据，State是存储在 Vuex 中的数据和 Vue 实例中的 <code>data</code> 遵循相同的规则。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'马总'</span><span class="token punctuation">,</span><span class="token string">'雷总'</span><span class="token punctuation">,</span><span class="token string">'王总'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1、第一种获取State的方法（不推荐）"><a href="#3-1、第一种获取State的方法（不推荐）" class="headerlink" title="3.1、第一种获取State的方法（不推荐）"></a>3.1、第一种获取State的方法（不推荐）</h4><p>用到的组件里面引入store，然后计算属性里面获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2、第二种获取State的方法"><a href="#3-2、第二种获取State的方法" class="headerlink" title="3.2、第二种获取State的方法"></a>3.2、第二种获取State的方法</h4><p>由于全局配置了Vuex <code>app.use(store)</code>，所以直接可以通过下面方法获取store里面的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3、第三种获取State的方法-通过mapState助手"><a href="#3-3、第三种获取State的方法-通过mapState助手" class="headerlink" title="3.3、第三种获取State的方法-通过mapState助手"></a>3.3、第三种获取State的方法-通过<code>mapState</code>助手</h4><p><strong>方法 1：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>修改新闻<span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token function-variable function">count</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>      <span class="token function-variable function">list</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>list<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法 2：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>修改新闻<span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>           <span class="token string">"count"</span><span class="token punctuation">,</span>      <span class="token string">"list"</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四：Vuex中的Getters"><a href="#四：Vuex中的Getters" class="headerlink" title="四：Vuex中的Getters"></a>四：Vuex中的Getters</h3><p>Getter有点类似我们前面给大家讲的计算属性。</p><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><h4 id="4-1-、定义Getter"><a href="#4-1-、定义Getter" class="headerlink" title="4.1 、定义Getter"></a>4.1 、定义Getter</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    todos<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">doneTodos</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2、访问Getter的第一种方法"><a href="#4-2、访问Getter的第一种方法" class="headerlink" title="4.2、访问Getter的第一种方法"></a>4.2、访问Getter的第一种方法</h4><p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值：</p><pre class="line-numbers language-none"><code class="language-none">store.getters.doneTodos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3、访问Getter的第二种方法"><a href="#4-3、访问Getter的第二种方法" class="headerlink" title="4.3、访问Getter的第二种方法"></a><strong>4.3、访问Getter的第二种方法</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodosCount  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4、访问Getter的第四种方法-通过mapGetters-辅助函数"><a href="#4-4、访问Getter的第四种方法-通过mapGetters-辅助函数" class="headerlink" title="4.4、访问Getter的第四种方法 通过mapGetters 辅助函数"></a>4.4、访问Getter的第四种方法 通过<code>mapGetters</code> 辅助函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'doneTodosCount'</span><span class="token punctuation">,</span>      <span class="token string">'anotherGetter'</span><span class="token punctuation">,</span>      <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span>  doneCount<span class="token operator">:</span> <span class="token string">'doneTodosCount'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、Vuex中的Mutations"><a href="#五、Vuex中的Mutations" class="headerlink" title="五、Vuex中的Mutations"></a>五、Vuex中的Mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</p><h4 id="4-1、定义Mutations-触发Mutations里面的方法"><a href="#4-1、定义Mutations-触发Mutations里面的方法" class="headerlink" title="4.1、定义Mutations 触发Mutations里面的方法"></a>4.1、定义Mutations 触发Mutations里面的方法</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// mutate state</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发mutations里面的方法：</p><pre class="line-numbers language-none"><code class="language-none">store.commit('increment')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2、执行方法传入参数："><a href="#4-2、执行方法传入参数：" class="headerlink" title="4.2、执行方法传入参数："></a>4.2、执行方法传入参数：</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> n  <span class="token punctuation">}</span><span class="token punctuation">}</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-对象方式提交数据"><a href="#4-3-对象方式提交数据" class="headerlink" title="4.3 对象方式提交数据"></a>4.3 对象方式提交数据</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> payload<span class="token punctuation">.</span>amount  <span class="token punctuation">}</span><span class="token punctuation">}</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'increment'</span><span class="token punctuation">,</span>  amount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-在组件中提交-Mutation"><a href="#4-4-在组件中提交-Mutation" class="headerlink" title="4.4 在组件中提交 Mutation"></a>4.4 在组件中提交 Mutation</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span>      <span class="token comment">// `mapMutations` 也支持载荷：</span>      <span class="token string">'incrementBy'</span> <span class="token comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      add<span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Vuex中的Actions"><a href="#六、Vuex中的Actions" class="headerlink" title="六、Vuex中的Actions"></a>六、Vuex中的Actions</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><h4 id="6-1、定义Action"><a href="#6-1、定义Action" class="headerlink" title="6.1、定义Action"></a>6.1、定义Action</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2、分发-Action-触发Action中的方法"><a href="#6-2、分发-Action-触发Action中的方法" class="headerlink" title="6.2、分发 Action(触发Action中的方法)"></a>6.2、分发 Action(触发Action中的方法)</h4><pre class="line-numbers language-none"><code class="language-none">store.dispatch('increment')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>乍一眼看上去感觉多此一举，我们直接分发 mutation 岂不更方便？实际上并非如此，还记得 <strong>mutation 必须同步执行</strong>这个限制么？Action 就不受约束！我们可以在 action 内部执行<strong>异步</strong>操作：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">incrementAsync</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actions 支持同样的载荷方式和对象方式进行分发：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 载荷方式</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'incrementAsync'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  amount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 对象方式</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token operator">:</span> <span class="token string">'incrementAsync'</span><span class="token punctuation">,</span>  amount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看一个更加实际的购物车示例，涉及到<strong>调用异步 API</strong> 和<strong>分发多重 mutation</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">checkout</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit<span class="token punctuation">,</span> state <span class="token punctuation">}</span><span class="token punctuation">,</span> products</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 把当前购物车的物品备份起来</span>    <span class="token keyword">const</span> savedCartItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>added<span class="token punctuation">]</span>    <span class="token comment">// 发出结账请求，然后乐观地清空购物车</span>    <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token constant">CHECKOUT_REQUEST</span><span class="token punctuation">)</span>    <span class="token comment">// 购物 API 接受一个成功回调和一个失败回调</span>    shop<span class="token punctuation">.</span><span class="token function">buyProducts</span><span class="token punctuation">(</span>      products<span class="token punctuation">,</span>      <span class="token comment">// 成功操作</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token constant">CHECKOUT_SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 失败操作</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token constant">CHECKOUT_FAILURE</span><span class="token punctuation">,</span> savedCartItems<span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我们正在进行一系列的异步操作，并且通过提交 mutation 来记录 action 产生的副作用（即状态变更）</p><h4 id="6-3-在组件中分发-Action"><a href="#6-3-在组件中分发-Action" class="headerlink" title="6.3 在组件中分发 Action"></a>6.3 在组件中分发 Action</h4><p>你在组件中使用 <code>this.$store.dispatch('xxx')</code> 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token comment">// map `this.increment()` to `this.$store.dispatch('increment')`</span>      <span class="token comment">// `mapActions` also supports payloads:</span>      <span class="token string">'incrementBy'</span> <span class="token comment">// map `this.incrementBy(amount)` to `this.$store.dispatch('incrementBy', amount)`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      add<span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token comment">// map `this.add()` to `this.$store.dispatch('increment')`</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-组合-Action"><a href="#6-4-组合-Action" class="headerlink" title="6.4 组合 Action"></a>6.4 组合 Action</h4><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你可以：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在另外一个 action 中也可以:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someOtherMutation'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果我们利用 <a href="https://tc39.github.io/ecmascript-asyncawait/">async / await</a>，我们可以如下组合 action：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// assuming `getData()` and `getOtherData()` return Promises</span>actions<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span> <span class="token comment">// wait for `actionA` to finish</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotOtherData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getOtherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、Modules"><a href="#七、Modules" class="headerlink" title="七、Modules"></a>七、Modules</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -&gt; `moduleA`'s state</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -&gt; `moduleB`'s state</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h4><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// `state` is the local module state</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">doubleCount</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八-、Vuex项目结构"><a href="#八-、Vuex项目结构" class="headerlink" title="八 、Vuex项目结构"></a>八 、Vuex项目结构</h3><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li></ol><p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">├── index<span class="token punctuation">.</span>html├── main<span class="token punctuation">.</span>js├── api│   └── <span class="token operator">...</span> # 抽取出<span class="token constant">API</span>请求├── components│   ├── App<span class="token punctuation">.</span>vue│   └── <span class="token operator">...</span>└── store    ├── index<span class="token punctuation">.</span>js          # 我们组装模块并导出 store 的地方    ├── actions<span class="token punctuation">.</span>js        # 根级别的 action    ├── mutations<span class="token punctuation">.</span>js      # 根级别的 mutation    └── modules        ├── cart<span class="token punctuation">.</span>js       # 购物车模块        └── products<span class="token punctuation">.</span>js   # 产品模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、Vuex结合组合式合成API"><a href="#九、Vuex结合组合式合成API" class="headerlink" title="九、Vuex结合组合式合成API"></a>九、Vuex结合组合式合成API</h3><p>组合式api中没有this.$store，可以使用useStore来替代</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1、组合式api中访问state-和-getters"><a href="#9-1、组合式api中访问state-和-getters" class="headerlink" title="9.1、组合式api中访问state 和 getters"></a>9.1、组合式api中访问state 和 getters</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    todos<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">doneTodos</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment">// access a state in computed function</span>      count<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// access a getter in computed function</span>      double<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>double<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2、组合式api中访问-Mutations-and-Actions"><a href="#9-2、组合式api中访问-Mutations-and-Actions" class="headerlink" title="9.2、组合式api中访问 Mutations and Actions"></a>9.2、组合式api中访问 Mutations and Actions</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment">// access a mutation</span>      <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// access an action</span>      <span class="token function-variable function">asyncIncrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'asyncIncrement'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、Vue-Typescript的项目里面集成Vuex"><a href="#十、Vue-Typescript的项目里面集成Vuex" class="headerlink" title="十、Vue+Typescript的项目里面集成Vuex"></a>十、Vue+Typescript的项目里面集成Vuex</h3><p>首先需要在vue项目中集成typescript</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">vue add typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>提示：</strong>如果配置完ts后调用this.$store有警告信息，请重启vscode，或者安装vue3的插件后重启vscode充实</p><h4 id="一、修改store-js-为store-ts"><a href="#一、修改store-js-为store-ts" class="headerlink" title="一、修改store.js 为store.ts"></a>一、修改store.js 为store.ts</h4><h4 id="二、配置store-ts中的代码"><a href="#二、配置store-ts中的代码" class="headerlink" title="二、配置store.ts中的代码"></a>二、配置store.ts中的代码</h4><p>Vuex与TypeScript一起使用时，必须声明自己的模块扩充。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentCustomProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span>Store  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//配置让Vuex支持ts</span>declare module <span class="token string">'@vue/runtime-core'</span> <span class="token punctuation">{</span>  <span class="token comment">//declare your own store states</span>  <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> number<span class="token punctuation">,</span>    list<span class="token operator">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment">// provide typings for `this.$store`</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>    $store<span class="token operator">:</span> Store<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'马总'</span><span class="token punctuation">,</span><span class="token string">'雷总'</span><span class="token punctuation">,</span><span class="token string">'王总'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">increment</span> <span class="token punctuation">(</span>state<span class="token operator">:</span>any<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>               state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、main-ts中挂载"><a href="#三、main-ts中挂载" class="headerlink" title="三、main.ts中挂载"></a>三、main.ts中挂载</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> route <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./vuex/store'</span><span class="token keyword">let</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//挂载路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token comment">//挂载vuex</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、组件中使用挂载"><a href="#四、组件中使用挂载" class="headerlink" title="四、组件中使用挂载"></a>四、组件中使用挂载</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>修改新闻<span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">mylist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>      <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>list    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token function-variable function">count</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>      <span class="token function-variable function">list</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>list<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/11/hello-world/"/>
      <url>/2021/10/11/hello-world/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
